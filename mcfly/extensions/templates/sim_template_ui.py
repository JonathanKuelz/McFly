from abc import abstractmethod, ABC
from typing import Optional

import omni.kit.ui
import omni.ui as ui


class UIBuilder(ABC):
    """Boilerplate code for a UI builder"""

    def __init__(self, window_title: str, menu_path: Optional[str] = None):
        """Set up some minimal information.

        Args:
            window_title (str): The title of the UI window generated by the extension.
            menu_path (str, optional): Needs to be provided if the UI should be accessbile via the menu path. For
                instance, could be Windows/MyExtension.
        """
        self._menu = None
        self._window = None

        self._menu_path: str = menu_path
        self._window_title: str = window_title

        # create menu entry
        if self._menu_path:
            self._menu = omni.kit.ui.get_editor_menu().add_item(self._menu_path, self.on_toggle, toggle=True,
                                                                value=False)

    def on_toggle(self, *args, **kwargs):
        """Toggle window visibility"""
        self.build_ui()
        if self._window is not None:
            self._window.visible = not self._window.visible

    @abstractmethod
    def build_ui(self):
        """
        Build the Graphical User Interface (GUI) in the underlying windowing system.

        This needs a custom implementation
        """

    def cleanup(self):
        """Clean up window and menu"""
        # destroy window
        if self._window is not None:
            self._window.destroy()
            self._window = None
        # destroy menu
        if self._menu is not None:
            try:
                omni.kit.ui.get_editor_menu().remove_item(self._menu)
            except:
                omni.kit.ui.get_editor_menu().remove_item(self._menu_path)
            self._menu = None
