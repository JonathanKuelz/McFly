from abc import abstractmethod, ABC
from typing import Optional

from isaacsim.core.api import World

import omni.kit.ui


class ExtensionUiTemplate(ABC):
    """Boilerplate code for a UI builder"""

    def __init__(self, window_title: str,
                 menu_path: Optional[str] = None,
                 ):
        """Set up some minimal information.

        Args:
            window_title (str): The title of the UI window generated by the extension.
            menu_path (str, optional): Needs to be provided if the UI should be accessbile via the menu path. For
                instance, could be Windows/MyExtension.
        """
        self._menu = None
        self._window = None

        self._menu_path: str = menu_path
        self._window_title: str = window_title

        # create menu entry
        if self._menu_path:
            self._menu = omni.kit.ui.get_editor_menu().add_item(self._menu_path, self.on_toggle, toggle=True,
                                                                value=False)

    def on_toggle(self, *args, **kwargs):
        """Toggle window visibility"""
        self.build_window()
        if self._window is not None:
            with self._window.frame:
                self.build_ui()
            self._window.visible = not self._window.visible

    @abstractmethod
    def build_window(self):
        """
        Build the window in the underlying windowing system.

        This needs a custom implementation
        """
        pass

    @abstractmethod
    def _world_cleanup(self):
        """Clean up the current world"""
        pass

    def build_ui(self):
        """
        Build the Graphical User Interface (GUI) in the underlying windowing system.

        This needs a custom implementation
        """
        pass

    def cleanup(self):
        """Clean up window and menu"""
        if self._window is not None:
            self._window.destroy()
            self._window = None
        # destroy menu
        if self._menu is not None:
            try:
                omni.kit.ui.get_editor_menu().remove_item(self._menu)
            except:
                omni.kit.ui.get_editor_menu().remove_item(self._menu_path)
            self._menu = None

    def on_stage_event(self, event):
        """Handle stage events, at least the one where this extension is closed."""
        if event.type == int(omni.usd.StageEventType.CLOSED):
            if World.instance() is not None:
                self._world_cleanup()
            self.cleanup()
